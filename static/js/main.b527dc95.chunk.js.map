{"version":3,"sources":["redux/ToDoList/slices.js","ToDoList/ToDo/ToDo.jsx","ToDoList/ToDoList.jsx","redux/Filter/slices.js","Filter/Filter.jsx","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["initialState","todos","JSON","parse","localStorage","getItem","createSlice","name","reducers","deleteToDo","state","payload","filter","todo","id","addToDo","newToDosArray","newToDo","isComplete","push","deleteCompletedToDos","toggleComplete","map","editToDoText","text","actions","reducer","ToDo","props","useState","isInput","setIsInput","dispatch","useDispatch","handleEditText","useCallback","handleDelete","handleKeyDown","e","code","type","className","onChange","target","value","onBlur","trim","onKeyDown","autoFocus","onClick","onDoubleClick","memo","ToDoList","useSelector","completedNum","length","shownTodos","useEffect","setItem","stringify","handleAddToDo","Date","now","handleClick","placeholder","editFilter","Filter","handleEditFilter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","store","configureStore","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b527dc95.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  todos: JSON.parse(localStorage.getItem('todos')) ?? [],\r\n};\r\n\r\nexport const todos = createSlice({\r\n  name: 'todos',\r\n  initialState,\r\n  reducers: {\r\n    deleteToDo: (state, { payload }) => {\r\n      state.todos = state.todos.filter((todo) => todo.id !== payload.id);\r\n    },\r\n    addToDo: (state, { payload }) => {\r\n      const newToDosArray = state.todos;\r\n      const newToDo = { isComplete: false, ...payload };\r\n      newToDosArray.push(newToDo);\r\n      state.todos = newToDosArray;\r\n    },\r\n    deleteCompletedToDos: (state) => {\r\n      state.todos = state.todos.filter((todo) => todo.isComplete);\r\n    },\r\n    toggleComplete: (state, { payload }) => {\r\n      state.todos = state.todos.map((todo) =>\r\n        todo.id === payload.id\r\n          ? { ...todo, isComplete: !todo.isComplete }\r\n          : todo\r\n      );\r\n    },\r\n    editToDoText: (state, { payload }) => {\r\n      state.todos = state.todos.map((todo) =>\r\n        todo.id === payload.id ? { ...todo, text: payload.text } : todo\r\n      );\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = todos;\r\n\r\nexport const {\r\n  deleteToDo,\r\n  addToDo,\r\n  deleteCompletedToDos,\r\n  toggleComplete,\r\n  editToDoText,\r\n} = actions;\r\n\r\nexport default reducer;\r\n","import '../../style.css';\r\nimport React, { useCallback, useState, memo } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n  deleteToDo,\r\n  toggleComplete,\r\n  editToDoText,\r\n} from '../../redux/ToDoList/slices';\r\n\r\nconst ToDo = (props) => {\r\n  const [isInput, setIsInput] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleEditText = useCallback((text) => {\r\n    dispatch(editToDoText({ text, id: props.id }));\r\n  }, [dispatch, props.id]);\r\n\r\n  const handleDelete = useCallback(() => {\r\n    dispatch(deleteToDo({ id: props.id }));\r\n  }, [dispatch, props.id]);\r\n\r\n  const handleKeyDown = useCallback((e) => {\r\n    if (e.code === 'Enter' || e.code === 'Escape') {\r\n      setIsInput(false);\r\n      handleEditText(props.text);\r\n    }\r\n  }, [handleEditText, setIsInput, props.text]);\r\n\r\n  return (\r\n    <li\r\n      type=\"none\"\r\n      className={`todo todo_active ${\r\n        props.isComplete ? 'todo_complete' : 'todo_incomplete'\r\n      }`}\r\n    >\r\n      {isInput && (\r\n        <input\r\n          type=\"text\"\r\n          className=\"todo__change-label\"\r\n          onChange={(e) => handleEditText(e.target.value)}\r\n          onBlur={() => {\r\n            setIsInput(false);\r\n            handleEditText(props.text);\r\n            if (!props.text.trim()) {\r\n              handleDelete();\r\n            }\r\n          }}\r\n          onKeyDown={handleKeyDown}\r\n          value={props.text}\r\n          autoFocus\r\n        />\r\n      )}\r\n      {!isInput && (\r\n        <div className={'todo__container todo__container_active'}>\r\n          <button\r\n            className=\"button todo__button-complete\"\r\n            onClick={() => dispatch(toggleComplete({ id: props.id }))}\r\n          >\r\n            {props.isComplete ? 'Y' : 'N'}\r\n          </button>\r\n          <div className=\"todo__text\" onDoubleClick={() => setIsInput(true)}>\r\n            {props.text}\r\n          </div>\r\n          <button className=\"button todo__button-delete\" onClick={handleDelete}>\r\n            &times;\r\n          </button>\r\n        </div>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default memo(ToDo);\r\n","import React, { useCallback, useEffect, memo } from 'react';\r\nimport ToDo from './ToDo/ToDo.jsx';\r\nimport '../style.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addToDo, deleteCompletedToDos } from '../redux/ToDoList/slices.js';\r\n\r\nconst ToDoList = () => {\r\n  const todos = useSelector((state) => state.todo.todos);\r\n  const completedNum = useSelector((state) => state.todo.todos).filter(\r\n    (todo) => todo.isComplete\r\n  ).length;\r\n  const filter = useSelector((state) => state.filter.filter);\r\n\r\n  let shownTodos = [];\r\n  switch (filter) {\r\n    case 'all':\r\n      shownTodos = todos;\r\n      break;\r\n    case 'completed':\r\n      shownTodos = todos.filter((todo) => todo.isComplete);\r\n      break;\r\n    case 'incompleted':\r\n      shownTodos = todos.filter((todo) => !todo.isComplete);\r\n      break;\r\n    default:\r\n      shownTodos = todos;\r\n      break;\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(\r\n    () => localStorage.setItem('todos', JSON.stringify(todos)),\r\n    [todos]\r\n  );\r\n\r\n  const handleAddToDo = useCallback((e) => {\r\n    if (e.target.value.trim()) {\r\n      dispatch(addToDo({ text: e.target.value, id: Date.now() }));\r\n    }\r\n    e.target.value = '';\r\n  }, [dispatch]);\r\n\r\n  const handleClick = useCallback((e) => {\r\n    if (e.code === 'Enter') {\r\n      handleAddToDo(e);\r\n    }\r\n  }, [handleAddToDo]);\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        className=\"todo__input\"\r\n        type=\"text\"\r\n        placeholder=\"What needs to be done\"\r\n        onKeyDown={handleClick}\r\n      />\r\n      <ul className={`todos ${filter}`}>\r\n        {shownTodos.map((todo) => (\r\n          <ToDo\r\n            key={todo.id}\r\n            text={todo.text}\r\n            id={todo.id}\r\n            isComplete={todo.isComplete}\r\n          />\r\n        ))}\r\n      </ul>\r\n      <footer className=\"footer\">\r\n        <div className=\"todos__completed\">\r\n          Completed: <span className=\"completed__number\">{completedNum}</span>\r\n        </div>\r\n        {completedNum !== 0 && (\r\n          <button\r\n            className=\"button todo__delete-completed\"\r\n            onClick={() => dispatch(deleteCompletedToDos())}\r\n          >\r\n            Delete completed\r\n          </button>\r\n        )}\r\n      </footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(ToDoList);\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  filter: localStorage.getItem('filter') ?? 'all',\r\n};\r\n\r\nexport const filter = createSlice({\r\n  name: 'filter',\r\n  initialState: initialState,\r\n  reducers: {\r\n    editFilter: (state, { payload }) => {\r\n      state.filter = payload.filter;\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = filter;\r\n\r\nexport const { editFilter } = actions;\r\n\r\nexport default reducer;\r\n","import React, { useCallback, useEffect, memo } from 'react';\r\nimport '../style.css';\r\nimport { editFilter } from '../redux/Filter/slices';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector((state) => state.filter.filter);\r\n\r\n  useEffect(() => localStorage.setItem('filter', filter), [filter]);\r\n\r\n  const handleEditFilter = useCallback(\r\n    (filter) => dispatch(editFilter({ filter })),\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <ul className=\"todos__filters\">\r\n      <li className=\"filter\">\r\n        <button\r\n          className={`button filter__button all ${\r\n            filter === 'all' ? 'current' : ''\r\n          }`}\r\n          onClick={() => handleEditFilter('all')}\r\n        >\r\n          All\r\n        </button>\r\n      </li>\r\n      <li className=\"filter\">\r\n        <button\r\n          className={`button filter__button completed ${\r\n            filter === 'completed' ? 'current' : ''\r\n          }`}\r\n          onClick={() => handleEditFilter('completed')}\r\n        >\r\n          Completed\r\n        </button>\r\n      </li>\r\n      <li className=\"filter\">\r\n        <button\r\n          className={`button filter__button incompleted ${\r\n            filter === 'incompleted' ? 'current' : ''\r\n          }`}\r\n          onClick={() => handleEditFilter('incompleted')}\r\n        >\r\n          Incompleted\r\n        </button>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default memo(Filter);\r\n","import './App.css';\r\nimport ToDoList from './ToDoList/ToDoList';\r\nimport Filter from './Filter/Filter';\r\nimport './style.css';\r\nimport React from 'react';\r\n\r\nconst App = () => (\r\n  <div className=\"container\">\r\n    <h1 className=\"title\">TODOS</h1>\r\n    <Filter />\r\n    <ToDoList />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\r\nimport todo from './ToDoList/slices';\r\nimport filter from './Filter/slices';\r\n\r\nconst reducer = combineReducers({ todo, filter });\r\n\r\nexport const store = configureStore({\r\n  reducer: reducer,\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>,\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
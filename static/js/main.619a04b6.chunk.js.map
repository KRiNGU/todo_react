{"version":3,"sources":["redux/ToDoList/slices.js","ToDoList/ToDo/ToDo.jsx","ToDoList/ToDoList.jsx","redux/Filter/slices.js","Filter/Filter.jsx","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["initialState","todos","JSON","parse","localStorage","getItem","createSlice","name","reducers","deleteToDo","state","payload","filter","todo","id","addToDo","newToDosArray","newToDo","isComplete","push","deleteCompletedToDos","_","toggleComplete","map","editToDoText","text","actions","reducer","ToDo","props","useState","isInput","setIsInput","dispatch","useDispatch","handleEditText","handleDelete","type","className","onChange","e","target","value","onBlur","trim","onKeyDown","code","autoFocus","onClick","onDoubleClick","ToDoList","useSelector","completedNum","length","inputToDo","setInputToDo","useEffect","setItem","stringify","placeholder","newToDoName","Date","now","handleAddToDo","editFilter","Filter","handleEditFilter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","store","configureStore","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.619a04b6.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  todos: JSON.parse(localStorage.getItem(\"todos\")) ?? [],\r\n};\r\n\r\nexport const todos = createSlice({\r\n  name: \"todos\",\r\n  initialState,\r\n  reducers: {\r\n    deleteToDo: (state, { payload }) => {\r\n      state.todos = state.todos.filter((todo) => todo.id !== payload.id);\r\n    },\r\n    addToDo: (state, { payload }) => {\r\n      const newToDosArray = state.todos;\r\n      const newToDo = { isComplete: false, ...payload };\r\n      newToDosArray.push(newToDo);\r\n      state.todos = newToDosArray;\r\n    },\r\n    deleteCompletedToDos: (state, _) => {\r\n      state.todos = state.todos.filter((todo) => todo.isComplete === false);\r\n    },\r\n    toggleComplete: (state, { payload }) => {\r\n      state.todos = state.todos.map((todo) =>\r\n        todo.id === payload.id\r\n          ? { ...todo, isComplete: !todo.isComplete }\r\n          : todo\r\n      );\r\n    },\r\n    editToDoText: (state, { payload }) => {\r\n      state.todos = state.todos.map((todo) =>\r\n        todo.id === payload.id ? { ...todo, text: payload.text } : todo\r\n      );\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = todos;\r\n\r\nexport const {\r\n  deleteToDo,\r\n  addToDo,\r\n  deleteCompletedToDos,\r\n  toggleComplete,\r\n  editToDoText,\r\n} = actions;\r\n\r\nexport default reducer;\r\n","import \"../../style.css\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  deleteToDo,\r\n  toggleComplete,\r\n  editToDoText,\r\n} from \"../../redux/ToDoList/slices\";\r\n\r\nexport default function ToDo(props) {\r\n  const [isInput, setIsInput] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleEditText = (text) => {\r\n    dispatch(editToDoText({ text, id: props.id }));\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    dispatch(deleteToDo({ id: props.id }));\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.code === \"Enter\" || e.code === \"Escape\") {\r\n      setIsInput(false);\r\n      handleEditText(props.text);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <li\r\n      type=\"none\"\r\n      className={`todo todo_active ${\r\n        props.isComplete ? \"todo_complete\" : \"todo_incomplete\"\r\n      }`}\r\n    >\r\n      {isInput && (\r\n        <input\r\n          type=\"text\"\r\n          className=\"todo__change-label\"\r\n          onChange={(e) => handleEditText(e.target.value)}\r\n          onBlur={() => {\r\n            setIsInput(false);\r\n            handleEditText(props.text);\r\n            if (props.text.trim() === \"\") {\r\n              handleDelete();\r\n            }\r\n          }}\r\n          onKeyDown={handleKeyDown}\r\n          value={props.text}\r\n          autoFocus\r\n        />\r\n      )}\r\n      {!isInput && (\r\n        <div className={`todo__container todo__container_active`}>\r\n          <button\r\n            className=\"button todo__button-complete\"\r\n            onClick={() => dispatch(toggleComplete({ id: props.id }))}\r\n          >\r\n            {props.isComplete ? \"Y\" : \"N\"}\r\n          </button>\r\n          <div className=\"todo__text\" onDoubleClick={() => setIsInput(true)}>\r\n            {props.text}\r\n          </div>\r\n          <button className=\"button todo__button-delete\" onClick={handleDelete}>\r\n            &times;\r\n          </button>\r\n        </div>\r\n      )}\r\n    </li>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ToDo from \"./ToDo/ToDo.jsx\";\r\nimport \"../style.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addToDo, deleteCompletedToDos } from \"../redux/ToDoList/slices.js\";\r\n\r\nexport default function ToDoList() {\r\n  const todos = useSelector((state) => state.todo.todos);\r\n  const completedNum = useSelector((state) => state.todo.todos).filter(\r\n    (todo) => todo.isComplete === true\r\n  ).length;\r\n  const filter = useSelector((state) => state.filter.filter);\r\n  const [inputToDo, setInputToDo] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => localStorage.setItem(\"todos\", JSON.stringify(todos)));\r\n\r\n  const handleAddToDo = () => {\r\n    const newToDoName = inputToDo.trim();\r\n    if (newToDoName !== \"\") {\r\n      dispatch(addToDo({ text: newToDoName, id: Date.now() }));\r\n    }\r\n    setInputToDo(\"\");\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    if (e.code === \"Enter\") {\r\n      handleAddToDo();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        className=\"todo__input\"\r\n        type=\"text\"\r\n        placeholder=\"What needs to be done\"\r\n        value={inputToDo}\r\n        onChange={(e) => setInputToDo(e.target.value)}\r\n        onKeyDown={handleClick}\r\n      />\r\n      <ul type=\"none\" className={`todos ${filter}`}>\r\n        {todos.map((todo) => (\r\n          <ToDo\r\n            key={todo.id}\r\n            text={todo.text}\r\n            id={todo.id}\r\n            isComplete={todo.isComplete}\r\n          />\r\n        ))}\r\n      </ul>\r\n      <footer className=\"footer\">\r\n        <div className=\"todos__completed\">\r\n          Completed: <span className=\"completed__number\">{completedNum}</span>\r\n        </div>\r\n        {completedNum !== 0 && (\r\n          <button\r\n            className=\"button todo__delete-completed\"\r\n            onClick={() => dispatch(deleteCompletedToDos())}\r\n          >\r\n            Delete completed\r\n          </button>\r\n        )}\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  filter: localStorage.getItem(\"filter\") ?? \"\",\r\n};\r\n\r\nexport const filter = createSlice({\r\n  name: \"filter\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    editFilter: (state, { payload }) => {\r\n      state.filter = payload.filter;\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = filter;\r\n\r\nexport const { editFilter } = actions;\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport \"../style.css\";\r\nimport { editFilter } from \"../redux/Filter/slices\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector((state) => state.filter.filter);\r\n  localStorage.setItem(\"filter\", filter);\r\n\r\n  const handleEditFilter = (filter) => dispatch(editFilter({ filter }));\r\n\r\n  return (\r\n    <ul className=\"todos__filters\">\r\n      <li className=\"filter\">\r\n        <button\r\n          className={`button filter__button all ${\r\n            filter === \"\" ? \"current\" : \"\"\r\n          }`}\r\n          onClick={() => handleEditFilter(\"\")}\r\n        >\r\n          All\r\n        </button>\r\n      </li>\r\n      <li className=\"filter\">\r\n        <button\r\n          className={`button filter__button completed ${\r\n            filter === \"todos_completed\" ? \"current\" : \"\"\r\n          }`}\r\n          onClick={() => handleEditFilter(\"todos_completed\")}\r\n        >\r\n          Completed\r\n        </button>\r\n      </li>\r\n      <li className=\"filter\">\r\n        <button\r\n          className={`button filter__button incompleted ${\r\n            filter === \"todos_incompleted\" ? \"current\" : \"\"\r\n          }`}\r\n          onClick={() => handleEditFilter(\"todos_incompleted\")}\r\n        >\r\n          Incompleted\r\n        </button>\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport ToDoList from \"./ToDoList/ToDoList\";\nimport Filter from \"./Filter/Filter\";\nimport \"./style.css\";\nimport React from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">TODOS</h1>\n      <Filter />\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport todo from \"./ToDoList/slices\";\r\nimport filter from \"./Filter/slices\";\r\n\r\nconst reducer = combineReducers({ todo, filter });\r\n\r\nexport const store = configureStore({\r\n  reducer: reducer,\r\n  devTools: process.env.NODE_ENV !== \"production\",\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}